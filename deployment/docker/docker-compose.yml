# Docker Compose configuration for OpenEvolve production deployment
version: '3.8'

services:
  # Main application
  openevolve-app:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: openevolve-app
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://openevolve:${DB_PASSWORD}@postgres:5432/openevolve
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
      - redis
    networks:
      - openevolve-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: openevolve-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=openevolve
      - POSTGRES_USER=openevolve
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - openevolve-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U openevolve"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: openevolve-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - openevolve-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: openevolve-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - openevolve-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: openevolve-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - openevolve-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: openevolve-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - openevolve-app
    networks:
      - openevolve-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  app_data:
  app_logs:

networks:
  openevolve-network:
    driver: bridge

